From iris.proofmode Require Import tactics.
From iris.algebra Require Import auth csum frac agree.
From lrust.lang.lib Require Import memcpy lock.
From lrust.lifetime Require Import na_borrow.
From lrust.typing Require Export type.
From lrust.typing Require Import typing option mutex.
Set Default Proof Using "Type".

Implicit Type ùîÑ ùîÖ: syn_type.

(* This type is an experiment in defining a Rust type on top of a non-typesysten-specific
   interface, like the one provided by lang.lib.lock.
   It turns out that we need an accessor-based spec for this purpose, so that
   we can put the protocol into shared borrows.  Cancellable invariants
   don't work because their cancelling view shift has a non-empty mask,
   and it would have to be executed in the consequence view shift of
   a borrow.
*)

Section mutexguard.
  Context `{!typeG Œ£}.

  (*
    pub struct MutexGuard<'a, T: ?Sized + 'a> {
      // funny underscores due to how Deref/DerefMut currently work (they
      // disregard field privacy).
      __lock: &'a Mutex<T>,
      __poison: poison::Guard,
    }
  *)
  Context `{!BiFUpd PROP}.
Implicit Type P Q R: PROP.

  Program Definition mutexguard {ùîÑ} (Œ∫: lft) (ty: type ùîÑ) : type (pred‚Çõ ùîÑ) := {|
    ty_size := 1;  ty_lfts := Œ∫ :: ty.(ty_lfts);  ty_E := ty.(ty_E) ++ ty_outlives_E ty Œ∫;
    (* One logical step is required for [ty_share] *)
    ty_own Œ¶œÄ d tid vl := ‚åúd > 0‚åù ‚àó [loc[l] := vl] ‚àÉŒ¶ Œ∫',
      ‚åúŒ¶œÄ = const Œ¶‚åù ‚àó Œ∫ ‚äë Œ∫' ‚àó Œ∫' ‚äë ty.(ty_lft) ‚àó
      &at{Œ∫, mutexN} (lock_proto l (mutex_body ty Œ¶ Œ∫' l tid)) ‚àó
      mutex_body ty Œ¶ Œ∫' l tid;
    ty_shr Œ¶œÄ _ Œ∫' tid l := ‚àÉŒ¶ (l': loc) Œ∫·µ¢ (vœÄ: proph ùîÑ) d,
      ‚åúŒ¶œÄ = const Œ¶‚åù ‚àó Œ∫' ‚äë Œ∫·µ¢ ‚àó Œ∫·µ¢ ‚äë ty.(ty_lft) ‚àó
      &frac{Œ∫'}(Œª q', l ‚Ü¶{q'} #l') ‚àó ‚ü®œÄ, Œ¶ (vœÄ œÄ)‚ü© ‚àó ‚ßñ(S d) ‚àó
      ‚ñ° ‚àÄE q, ‚åú‚ÜëlftN ‚à™ ‚ÜëshrN ‚äÜ E‚åù -‚àó q.[Œ∫·µ¢]
        ={E,E‚àñ‚ÜëshrN}=‚àó |={E‚àñ‚ÜëshrN}‚ñ∑=>^(S d) |={E‚àñ‚ÜëshrN,E}=>
          ty.(ty_shr) vœÄ d Œ∫·µ¢ tid (l' +‚Çó 1) ‚àó q.[Œ∫·µ¢];
  |}%I.
  Next Obligation. iIntros (??????[|[[]|][]]) "[%?] //". Qed.
  Next Obligation. iIntros "*% [%$] !%". lia. Qed.
  Next Obligation. done. Qed.
  Next Obligation.
    iIntros "%%* #InŒ∫' (%&%&%&%&%&->& ‚äëŒ∫·µ¢ & Œ∫·µ¢‚äë & Bor & big)".
    iExists _, _, _, _, _. iFrame "Œ∫·µ¢‚äë big". iSplit; [done|].
    iSplit; [|by iApply frac_bor_shorten]. by iApply lft_incl_trans.
  Qed.
  Next Obligation.
    iIntros (????? d Œ∫') "*% #LFT #In Bor Œ∫' //".
    iMod (bor_exists with "LFT Bor") as (vl) "Bor"; [done|].
    iMod (bor_sep with "LFT Bor") as "[Bor‚Ü¶ Bor]"; [done|].
    iMod (bor_sep_persistent with "LFT Bor Œ∫'") as "(>% & Bor & Œ∫')"; [done|].
    case d as [|]; [done|]. case vl as [|[[|l'|]|][]];
      try by iMod (bor_persistent with "LFT Bor Œ∫'") as "[>[] _]".
    setoid_rewrite heap_mapsto_vec_singleton.
    iMod (bor_fracture (Œª q, _ ‚Ü¶{q} _)%I with "LFT Bor‚Ü¶") as "#Bor‚Ü¶"; [done|].
    iMod (bor_exists with "LFT Bor") as (Œ¶) "Bor"; [done|].
    iMod (bor_exists with "LFT Bor") as (Œ∫'') "Bor"; [done|].
    iMod (bor_sep_persistent with "LFT Bor Œ∫'") as "(>-> & Bor & Œ∫')"; [done|].
    do 2 (iMod (bor_sep_persistent with "LFT Bor Œ∫'") as "(#? & Bor & Œ∫')"; [done|]).
    iMod (bor_sep with "LFT Bor") as "[_ Bor]"; [done|].
    iMod (bor_unnest with "LFT Bor") as "Bor"; [done|]. iIntros "/=!>!>!>!>".
    iApply step_fupdN_full_intro. iMod "Bor". set Œ∫·µ¢ := Œ∫'' ‚äì Œ∫'.
    iAssert (Œ∫' ‚äë Œ∫·µ¢)%I as "Œ∫'‚äëŒ∫·µ¢".
    { iApply lft_incl_glb; [|iApply lft_incl_refl]. iApply lft_incl_trans; [|done].
      iApply lft_incl_trans; [done|]. iApply lft_intersect_incl_l. }
    iMod (lft_incl_acc with "Œ∫'‚äëŒ∫·µ¢ Œ∫'") as (?) "[Œ∫·µ¢ ToŒ∫']"; [done|].
    do 2 (iMod (bor_exists_tok with "LFT Bor Œ∫·µ¢") as (?) "[Bor Œ∫·µ¢]"; [done|]).
    iMod (bor_sep_persistent with "LFT Bor Œ∫·µ¢") as "(>Obs & Bor & Œ∫·µ¢)"; [done|].
    iMod (bor_sep_persistent with "LFT Bor Œ∫·µ¢") as "(>‚ßñ & Bor & Œ∫·µ¢)"; [done|].
    iMod ("ToŒ∫'" with "Œ∫·µ¢") as "Œ∫'".
    iMod (inv_alloc shrN _ (_ ‚à® ty.(ty_shr) _ _ _ _ _)%I with "[Bor]") as "#inv".
    { iLeft. iNext. iExact "Bor". }
    iModIntro. iFrame "Œ∫'". iExists _, _, Œ∫·µ¢, _, _. iSplit; [done|].
    iFrame "Bor‚Ü¶ Obs ‚ßñ Œ∫'‚äëŒ∫·µ¢". iAssert (Œ∫·µ¢ ‚äë ty.(ty_lft))%I as "#?".
    { iApply lft_incl_trans; [iApply lft_intersect_incl_l|done]. }
    iSplit; [done|]. iIntros "!>" (???) "Œ∫·µ¢".
    iInv shrN as "[Bor|#ty]" "Close"; iIntros "/=!>!>!>"; last first.
    { iApply step_fupdN_full_intro. iModIntro. iFrame "Œ∫·µ¢".
      iMod ("Close" with "[]"); by [iRight|]. }
    iMod (ty_share with "LFT [] Bor Œ∫·µ¢") as "Upd"; [solve_ndisj|done|].
    iApply (step_fupdN_wand with "Upd"). iIntros "!> >[#ty $]".
    iMod ("Close" with "[]"); by [iRight|].
  Qed.
  Next Obligation.
    iIntros (???????[|[[]|][]]) "*% _ _ [% big] //". iDestruct "big" as (??->) "?".
    iIntros "$ !>". iApply step_fupdN_full_intro. iModIntro. iExists [], 1%Qp.
    do 2 (iSplit; [done|]). iIntros "_!>". iSplit; [done|]. iExists _, _. by iFrame.
  Qed.
  Next Obligation.
    iIntros "*% _ _ _ (%&%&%&%&%&->&?) $ !>!>!>". iApply step_fupdN_full_intro.
    iModIntro. iExists [], 1%Qp. do 2 (iSplit; [done|]). iIntros "_!>".
    iExists _, _, _, _, _. by iFrame.
  Qed.

  Global Instance mutexguard_ne {ùîÑ} Œ∫ : NonExpansive (mutexguard (ùîÑ:=ùîÑ) Œ∫).
  Proof. rewrite /mutexguard /mutex_body. solve_ne_type. Qed.

  Global Instance mutexguard_type_contractive {ùîÑ} Œ∫ :
    TypeContractive (mutexguard (ùîÑ:=ùîÑ) Œ∫).
  Proof.
    split; [by eapply type_lft_morphism_add_one|done| |].
    - move=>/= *. do 10 f_equiv. { by apply equiv_dist, lft_incl_equiv_proper_r. }
      rewrite /mutex_body.
      f_equiv; [do 2 f_equiv|]; f_contractive; do 9 f_equiv; by simpl in *.
    - move=>/= *. do 13 f_equiv. { by apply equiv_dist, lft_incl_equiv_proper_r. }
      do 17 (f_contractive || f_equiv). by simpl in *.
  Qed.

  Global Instance mutexguard_sync {ùîÑ} Œ∫ (ty: type ùîÑ) :
    Sync ty ‚Üí Sync (mutexguard Œ∫ ty).
  Proof. move=> ?>/=. by do 30 f_equiv. Qed.

  (* POSIX requires the unlock to occur from the thread that acquired
     the lock, so Rust does not implement Send for MutexGuard. We can
     prove this for our spinlock implementation, however. *)
  Global Instance mutexguard_send {ùîÑ} Œ∫ (ty: type ùîÑ) :
    Send ty ‚Üí Send (mutexguard Œ∫ ty).
  Proof.
    move=> ?>/=. rewrite /mutex_body. do 21 f_equiv; [|done]. by do 2 f_equiv.
  Qed.

  (* In order to prove [mutexguard_leak] with a non-trivial postcondition,
    we need to modify the model of [leak] to use [‚ßñd] inside [ty_own] *)
  Lemma mutexguard_leak {ùîÑ} Œ∫ (ty: type ùîÑ) E L :
    leak E L (mutexguard Œ∫ ty) (const True).
  Proof. apply leak_just. Qed.

  Lemma mutexguard_real {ùîÑ} Œ∫ (ty: type ùîÑ) E L : real E L (mutexguard Œ∫ ty) id.
  Proof.
    split.
    - iIntros (????? vl) "*% _ _ $ (%& big) !>". case vl as [|[[]|][]]=>//.
      iDestruct "big" as (??->) "?". iApply step_fupdN_full_intro. iModIntro.
      iSplit; [by iExists _|]. iSplit; [done|]. iExists _, _. by iFrame.
    - iIntros "*% _ _ $ (%&%&%&%&%&->&?) !>!>!>". iApply step_fupdN_full_intro.
      iModIntro. iSplit; [by iExists _|]. iExists _, _, _, _, _. by iFrame.
  Qed.

  Lemma mutexguard_subtype {ùîÑ ùîÖ} Œ∫ Œ∫' f g `{!@Iso ùîÑ ùîÖ f g} ty ty' E L :
    lctx_lft_incl E L Œ∫' Œ∫ ‚Üí eqtype E L ty ty' f g ‚Üí
    subtype E L (mutexguard Œ∫ ty) (mutexguard Œ∫' ty') (.‚àò g).
  Proof.
    move=> Lft /eqtype_unfold Eq ?. iIntros "L".
    iDestruct (Lft with "L") as "#ToŒ∫'‚äëŒ∫". iDestruct (Eq with "L") as "#ToEq".
    iIntros "!> E". iDestruct ("ToŒ∫'‚äëŒ∫" with "E") as "#Œ∫'‚äëŒ∫".
    iDestruct ("ToEq" with "E") as "(%&[#?#?]& #InOwn & #InShr)". iSplit; [done|].
    iSplit; [by iApply lft_intersect_mono|]. iSplit; iModIntro.
    - iIntros (???[|[[]|][]]) "[% big] //".
      iDestruct "big" as (? Œ∫''->) "(#?&#?& At & Mut)". iSplit; [done|]. iExists _, Œ∫''.
      iSplit; [done|]. do 2 (iSplit; [by iApply lft_incl_trans|]).
      iDestruct (mutex_body_iff with "InOwn") as "Iff". iSplit; [|by iApply "Iff"].
      iApply at_bor_shorten; [done|]. iApply (at_bor_iff with "[] At"). iNext.
      by iApply lock_proto_iff_proper.
    - iIntros "* (%&%& %Œ∫·µ¢ &%&%&->&#?&#?&#?&#?&#?& #big)".
      iExists _, _, Œ∫·µ¢, (f ‚àò _), _. do 2 (iSplit; [done|]).
      iSplit; [by iApply lft_incl_trans|]. iSplit; [done|].
      iSplit. { iApply proph_obs_eq; [|done]=>/= ?. by rewrite semi_iso'. }
      iSplit; [done|]. iIntros "!>" (???) "Œ∫·µ¢". iMod ("big" with "[//] Œ∫·µ¢") as "Upd".
      iApply (step_fupdN_wand with "Upd"). iIntros "!> >[?$] !>". by iApply "InShr".
  Qed.
  Lemma mutexguard_eqtype {ùîÑ ùîÖ} Œ∫ Œ∫' f g `{!@Iso ùîÑ ùîÖ f g} ty ty' E L :
    lctx_lft_eq E L Œ∫' Œ∫ ‚Üí eqtype E L ty ty' f g ‚Üí
    eqtype E L (mutexguard Œ∫ ty) (mutexguard Œ∫' ty') (.‚àò g) (.‚àò f).
  Proof.
    move=> [??][??]. split; by (eapply mutexguard_subtype; [split; apply _|..]).
  Qed.

  Lemma mutex_acc E l q Œ∫ (R: iProp Œ£) :
    ‚ÜëlftN ‚à™ ‚ÜëmutexN ‚äÜ E ‚Üí lft_ctx -‚àó &at{Œ∫, mutexN} (lock_proto l R) -‚àó
    ‚ñ° (q.[Œ∫] ={E,‚àÖ}=‚àó ‚ñ∑ lock_proto l R ‚àó (‚ñ∑ lock_proto l R ={‚àÖ,E}=‚àó q.[Œ∫])).
  Proof.
    iIntros (?) "#LFT #At !> Œ∫".
    iMod (at_bor_acc_tok with "LFT At Œ∫") as "[Prt ToŒ∫]"; [solve_ndisj..|].
    iApply fupd_mask_intro; [set_solver|]. iIntros "End". iFrame "Prt". by iMod "End".
  Qed.

  Definition mutex_lock : val :=
    fn: ["bm"] :=
      let: "m" := !"bm" in acquire ["m"];;
      letalloc: "g" <- "m" in
      delete [ #1; "bm"];; return: ["g"].

  Lemma mutex_lock_type {ùîÑ} (ty: type ùîÑ) :
    typed_val mutex_lock (fn<Œ±>(‚àÖ; &shr{Œ±} (mutex ty)) ‚Üí mutexguard Œ± ty)
      (Œª post '-[Œ¶], post Œ¶).
  Proof.
    eapply type_fn; [solve_typing|]=>/= Œ± ??[bm[]]. simpl_subst.
    iIntros (?[?[]]?) "#LFT TIME _ _ E Na L C /=[bm _] #Obs". rewrite tctx_hasty_val.
    iDestruct "bm" as ([|d]) "[‚ßñ box]"=>//. case bm as [[|bm|]|]=>//.
    iDestruct "box" as "[(%vl & >‚Ü¶m & shr) ‚Ä†m]".
    case d as [|]; try by iDestruct "shr" as ">[]".
    case vl as [|[[|l|]|][]]; try by iDestruct "shr" as ">[]".
    rewrite heap_mapsto_vec_singleton. wp_read. wp_let.
    iDestruct "shr" as (??->) "(#? & #? & #At)".
    iMod (lctx_lft_alive_tok Œ± with "E L") as (?) "(Œ± & L & ToL)"; [solve_typing..|].
    wp_apply (acquire_spec with "[] Œ±"). { by iApply (mutex_acc with "LFT At"). }
    iIntros "[Bor Œ±]". wp_seq. wp_bind (new _). iApply wp_new; [done..|].
    iIntros "!>% [‚Ä†g ‚Ü¶g]". wp_let. rewrite heap_mapsto_vec_singleton. wp_write.
    wp_bind (delete _). rewrite -heap_mapsto_vec_singleton freeable_sz_full.
    iApply (wp_delete with "[$‚Ü¶m $‚Ä†m]"); [done|]. iIntros "!>_". do 3 wp_seq.
    iMod ("ToL" with "Œ± L") as "L". rewrite cctx_interp_singleton.
    iApply ("C" $! [# #_] -[_] with "Na L [-] Obs").
    rewrite/= right_id (tctx_hasty_val #_). iExists _. iSplit; [done|].
    rewrite -freeable_sz_full. iFrame "‚Ä†g". iNext. iExists [_].
    rewrite heap_mapsto_vec_singleton. iFrame "‚Ü¶g". iSplit; [done|].
    iExists _, _. by do 4 (iSplit; [done|]).
  Qed.

  Definition mutexguard_deref: val :=
    fn: ["g"] :=
      let: "g'" := !"g" in let: "m" := !"g'" in
      letalloc: "r" <- ("m" +‚Çó #1) in
      delete [ #1; "g"];; return: ["r"].

(*
  Lemma mutexguard_derefmut_type ty :
    typed_val mutexguard_derefmut
              (fn(‚àÄ '(Œ±, Œ≤), ‚àÖ; &uniq{Œ±}(mutexguard Œ≤ ty)) ‚Üí &uniq{Œ±}ty).
  Proof.
    intros E L. iApply type_fn; [solve_typing..|]. iIntros "/= !>".
      iIntros ([Œ± Œ≤] œù ret arg). inv_vec arg=>g. simpl_subst.
    iApply type_deref; [solve_typing..|]; iIntros (g'); simpl_subst.
    (* Switch to Iris. *)
    iIntros (tid) "#LFT #HE Hna HL Hk [Hg [Hg' _]]".
    rewrite !tctx_hasty_val [[g]]lock /=.
    iDestruct "Hg'" as "[#? Hg']".
    destruct g' as [[|lg|]|]; try done. simpl.
    iMod (bor_exists with "LFT Hg'") as (vl) "Hbor"; first done.
    iMod (bor_sep with "LFT Hbor") as "[H‚Ü¶ Hprot]"; first done.
    iMod (lctx_lft_alive_tok Œ± with "HE HL") as (qŒ±) "(HŒ± & HL & Hclose1)";
      [solve_typing..|].
    destruct vl as [|[[|lm|]|] [|]]; simpl;
      try by iMod (bor_persistent with "LFT Hprot HŒ±") as "[>[] _]".
    rewrite heap_mapsto_vec_singleton.
    iMod (bor_exists with "LFT Hprot") as (Œ∫) "Hprot"; first done.
    iMod (bor_sep with "LFT Hprot") as "[HŒ≤Œ∫ Hprot]"; first done.
    iMod (bor_sep with "LFT Hprot") as "[HŒ∫ty Hprot]"; first done.
    iMod (bor_sep with "LFT Hprot") as "[_ Hlm]"; first done.
    iMod (bor_persistent with "LFT HŒ≤Œ∫ HŒ±") as "[#HŒ≤Œ∫ HŒ±]"; first done.
    iMod (bor_persistent with "LFT HŒ∫ty HŒ±") as "[#HŒ∫ty HŒ±]"; first done.
    iMod (bor_acc with "LFT H‚Ü¶ HŒ±") as "[H‚Ü¶ Hclose2]"; first done.
    wp_bind (!_)%E. iMod (bor_unnest with "LFT Hlm") as "Hlm"; first done.
    wp_read. wp_let. iMod "Hlm".
    iDestruct (lctx_lft_incl_incl Œ± Œ≤ with "HL HE") as "#HŒ±Œ≤"; [solve_typing..|].
    iMod ("Hclose2" with "H‚Ü¶") as "[_ HŒ±]".
    iMod ("Hclose1" with "HŒ± HL") as "HL".
    (* Switch back to typing mode. *)
    iApply (type_type _ _ _ [ g ‚óÅ own_ptr _ _; #lm +‚Çó #1 ‚óÅ &uniq{Œ±} ty ]
        with "[] LFT HE Hna HL Hk"); last first.
    { rewrite tctx_interp_cons tctx_interp_singleton tctx_hasty_val tctx_hasty_val' //.
      unlock. iFrame. iSplitR.
      - iApply lft_incl_trans; [done|]. by iApply lft_incl_trans.
      - iApply bor_shorten; last done.
        iApply lft_incl_glb; last by iApply lft_incl_refl.
        iApply lft_incl_trans; done. }
    iApply type_letalloc_1; [solve_typing..|]; iIntros (r); simpl_subst.
    iApply type_delete; [solve_typing..|].
    iApply type_jump; solve_typing.
  Qed.
*)

  Lemma mutexguard_deref_shr_type {ùîÑ} (ty: type ùîÑ) :
    typed_val mutexguard_deref
      (fn<(Œ±, Œ≤)>(‚àÖ; &shr{Œ±} (mutexguard Œ≤ ty)) ‚Üí &shr{Œ±} ty)
      (Œª post '-[Œ¶], ‚àÄa: ùîÑ, Œ¶ a ‚Üí post a).
  Proof.
    eapply type_fn; [solve_typing|]=>/= Œ±Œ≤ ??[g[]]. case Œ±Œ≤=> Œ± Œ≤. simpl_subst.
    iIntros (?[?[]]?) "LFT #TIME _ _ #E Na L C /=[g _] Obs". rewrite tctx_hasty_val.
    iDestruct "g" as ([|d]) "[_ box]"=>//. case g as [[|g|]|]=>//.
    iDestruct "box" as "[(%vl & >‚Ü¶g & guard) ‚Ä†g]".
    case d as [|]; try by iDestruct "guard" as ">[]".
    case vl as [|[[|l|]|][]]; try by iDestruct "guard" as ">[]".
    rewrite heap_mapsto_vec_singleton. wp_read. wp_let.
    iDestruct "guard" as (?????->) "(#‚äëŒ∫·µ¢ &?& Bor‚Ü¶ & Obs' & #‚ßñ & #Upd)".
    iCombine "Obs Obs'" as "#?".
    iMod (lctx_lft_alive_tok Œ± with "E L") as (?) "(Œ± & L & ToL)";
      [solve_typing..|].
    iMod (frac_bor_acc with "LFT Bor‚Ü¶ Œ±") as (?) "[>‚Ü¶l ToŒ±]"; [done|].
    wp_read. wp_let. iMod ("ToŒ±" with "‚Ü¶l") as "Œ±".
    iMod (lft_incl_acc with "‚äëŒ∫·µ¢ Œ±") as (?) "[Œ∫·µ¢ ToŒ±]"; [done|].
    wp_bind (new _). iSpecialize ("Upd" $! ‚ä§ with "[//] Œ∫·µ¢").
    iApply (wp_step_fupdN_persistent_time_receipt _ _ ‚àÖ with "TIME ‚ßñ [Upd]");
      [done|done| |].
    { iApply step_fupdN_with_emp. rewrite difference_empty_L.
      iApply (step_fupdN_nmono (S _)); [|done]. lia. }
    iApply wp_new; [done..|]. iIntros "!>% [‚Ä†r ‚Ü¶r] [ty Œ∫·µ¢] !>". wp_let.
    iMod ("ToŒ±" with "Œ∫·µ¢") as "Œ±". iMod ("ToL" with "Œ± L") as "L".
    rewrite heap_mapsto_vec_singleton. wp_op. wp_write. wp_bind (delete _).
    rewrite -heap_mapsto_vec_singleton freeable_sz_full.
    iApply (wp_persistent_time_receipt with "TIME ‚ßñ"); [done|]. iClear "‚ßñ".
    iApply (wp_delete with "[$‚Ü¶g $‚Ä†g]"); [done|]. iIntros "!>_ #‚ßñ".
    do 3 wp_seq. rewrite cctx_interp_singleton.
    iApply ("C" $! [# #_] -[_] with "Na L [-] []"); last first.
    { iApply proph_obs_impl; [|done]=>/= ?[Imp ?]. by apply Imp. }
    rewrite/= right_id (tctx_hasty_val #_). iExists _. iSplit; [done|].
    rewrite/= freeable_sz_full. iFrame "‚Ä†r". iNext. iExists [_].
    rewrite heap_mapsto_vec_singleton. iFrame "‚Ü¶r". by iApply ty_shr_lft_mono.
  Qed.

(*
  Definition mutexguard_drop : val :=
    fn: ["g"] :=
      let: "m" := !"g" in
      release ["m"];;
      delete [ #1; "g" ];;
      let: "r" := new [ #0 ] in return: ["r"].

  Lemma mutexguard_drop_type ty :
    typed_val mutexguard_drop (fn(‚àÄ Œ±, ‚àÖ; mutexguard Œ± ty) ‚Üí unit).
  Proof.
    intros E L. iApply type_fn; [solve_typing..|]. iIntros "/= !>".
      iIntros (Œ± œù ret arg). inv_vec arg=>g. simpl_subst.
    iApply type_deref; [solve_typing..|]; iIntros (m); simpl_subst.
    (* Switch to Iris. *)
    iIntros (tid) "#LFT #HE Hna HL Hk [Hg [Hm _]]".
    rewrite !tctx_hasty_val [[g]]lock /=.
    destruct m as [[|lm|]|]; try done. iDestruct "Hm" as (Œ≤) "(#HŒ±Œ≤ & #HŒ≤ty & #Hshr & Hcnt)".
    (* All right, we are done preparing our context. Let's get going. *)
    iMod (lctx_lft_alive_tok Œ± with "HE HL") as (q) "(HŒ± & HL & Hclose1)"; [solve_typing..|].
    wp_apply (release_spec with "[] [HŒ± Hcnt]");
      [by iApply (mutex_acc with "LFT Hshr HŒ±Œ≤")|by iFrame|].
    iIntros "Htok". wp_seq. iMod ("Hclose1" with "Htok HL") as "HL".
    (* Switch back to typing mode. *)
    iApply (type_type _ _ _ [ g ‚óÅ own_ptr _ _ ]
        with "[] LFT HE Hna HL Hk"); last first.
    { rewrite tctx_interp_singleton tctx_hasty_val. unlock. iFrame. }
    iApply type_delete; [solve_typing..|].
    iApply type_new; [solve_typing..|]; iIntros (r); simpl_subst.
    iApply type_jump; solve_typing.
  Qed.

  (* TODO: Should we do try_lock? *)
*)
End mutexguard.

Global Hint Resolve mutexguard_leak mutexguard_real
  mutexguard_subtype mutexguard_eqtype : lrust_typing.
