From lrust.typing Require Export type.
From lrust.typing Require Import array_util typing.
From lrust.typing.lib.ghostptrtoken Require Export permdata ghostseq.
Set Default Proof Using "Type".

Open Scope nat.
Implicit Type ùîÑ ùîÖ: syn_type.

Notation "'[‚àó' 'list]' ( k , x ) ‚àà l , P" := ((big_sepL (fun _ '(k, x) => P) l))%core
(at level 200, l at level 10, k, x at level 1, right associativity)
  : bi_scope.

Notation al_fmap f := (fmap (prod_map id f)).

Notation list_to_gmap := (@list_to_map loc _ (gmap loc _)).

Lemma elem_of_list_to_map_2' {K A M} `{FinMap K M} (l: list (K * A)) i x:
  ((list_to_map l): M A) !! i = Some x ‚Üí ‚àÉ r, l ‚â°‚Çö (i, x) :: r /\ ((list_to_map l): M A) = <[i:=x]>(list_to_map r).
Proof.
  intros. induction l as [|[i' x'] r]. apply elem_of_list_to_map_2 in H7. apply elem_of_nil in H7. done.
  destruct (decide (i'=i)) as [->|?].
  rewrite list_to_map_cons lookup_insert in H7.
  injection H7 as <-. exists r. split. reflexivity. 
  rewrite list_to_map_cons. reflexivity.
  rewrite list_to_map_cons lookup_insert_ne in H7; [|done].
  destruct (IHr H7) as (r'&perm&ltm).
  exists ((i', x')::r'). split. rewrite Permutation_swap -perm. done.
  rewrite 2! list_to_map_cons ltm insert_commute.
  done. done.
Qed.

Section token.

  Context `{!typeG Œ£}.

  Global Instance big_sepAL_persistent {K A} (Œ¶: K ‚Üí A ‚Üí iProp Œ£) (l: list (K*A)):
    (‚àÄ k x, Persistent (Œ¶ k x)) ‚Üí Persistent ([‚àó list] (k, x) ‚àà l, Œ¶ k x).
  Proof.
    intros. apply big_sepL_persistent. intros ?[??]. done.
  Qed.

  Definition alapply {A B K} (fl: list (K*(B ‚Üí A))) (x: B) := (al_fmap (.$ x) fl).


  Program Definition ghostptrtoken_ty {ùîÑ} (ty: type ùîÑ) : type (list‚Çõ (loc‚Çõ * ùîÑ)) :=
   (ghostseq_ty (permdata_ty ty)).
  

  Lemma ghostptrtoken_own_alt {ùîÑ} (ty: type ùîÑ) alœÄ d tid vl:
    ty_own (ghostptrtoken_ty ty) alœÄ d tid vl ‚ä£‚ä¢
      ‚àÉ(aœÄl: list (loc * (proph ùîÑ))),
        ‚åúvl = [] ‚àß alœÄ = alapply aœÄl‚åù ‚àó
        ([‚àó list] (l, aœÄ) ‚àà aœÄl, [S(d') := d] ‚ñ∑ l ‚Ü¶‚àó: ty.(ty_own) aœÄ d' tid) ‚àó
        ([‚àó list] (l, aœÄ) ‚àà aœÄl, freeable_sz' ty.(ty_size) l).
  Proof. iSplit; iIntros "(%&(->&->)&X)"; iStopProof; 
    (induction aœÄl; [iIntros "_"; iExists []; do 4 (iSplit||iModIntro||done)|]).
    - iIntros "((%&%&(_&->)&X)&rest)". iDestruct (IHaœÄl with "rest") as "(%&(_&%)&tys&frees)". iExists ((l, vœÄ') :: aœÄl0).
    iSplit. iPureIntro. split; [done|]. fun_ext=>œÄ. simpl. by rewrite H.
    destruct d; [done|]. iFrame. iDestruct "X" as "($&free)". rewrite freeable_sz_full. done.
    - simpl. destruct a. iIntros "((ty&tys)&(free&frees))".
    iDestruct (IHaœÄl with "[$tys $frees]") as "(%&(_&%)&X)". iExists (_ :: aœÄl0).
    iSplit. iPureIntro. split; [done|]. fun_ext=>œÄ. simpl. by rewrite H.
    iFrame. iExists _, _. iSplit; [done|]. destruct d; iFrame. rewrite freeable_sz_full. done.
  Qed.

  Lemma ghostptrtoken_shr_alt {ùîÑ} (ty: type ùîÑ) alœÄ d Œ∫ tid l:
  ty_shr (ghostseq_ty (permdata_ty ty)) alœÄ d Œ∫ tid l ‚ä£‚ä¢
    ‚àÉ(aœÄl: list (loc * (proph ùîÑ))),
    ‚åúalœÄ = alapply aœÄl‚åù ‚àó
    ([‚àó list] (l, aœÄ) ‚àà aœÄl, [S(d') := d] ‚ñ∑ ty.(ty_shr) aœÄ d' Œ∫ tid l).
  Proof. iSplit; iIntros "(%&->&X)"; iStopProof; 
    (induction aœÄl; [iIntros "_"; iExists []; do 4 (iSplit||iModIntro||done)|]).
    - iIntros "((%&%&->&X)&rest)". iDestruct (IHaœÄl with "rest") as "(%&%&tys)". iExists ((l0, vœÄ') :: aœÄl0).
    iSplit. iPureIntro. fun_ext=>œÄ. simpl. by rewrite H.
    destruct d; [done|]. iFrame.
    - simpl. destruct a. iIntros "(ty&tys)".
    iDestruct (IHaœÄl with "tys") as "(%&%&X)". iExists (_ :: aœÄl0).
    iSplit. iPureIntro. fun_ext=>œÄ. simpl. by rewrite H.
    iFrame. iExists _, _. iSplit; [done|]. destruct d; iFrame.
  Qed.

  Lemma split_mt_token {ùîÑ} (ty: type ùîÑ) l' alœÄ d tid :
  (l' ‚Ü¶‚àó: ty_own (ghostptrtoken_ty ty) alœÄ d tid ) ‚ä£‚ä¢
  ‚àÉ(aœÄl: list (loc * (proph ùîÑ))),
    ‚åúalœÄ = alapply aœÄl‚åù ‚àó l' ‚Ü¶‚àó [] ‚àó         
    ([‚àó list] (l, aœÄ) ‚àà aœÄl, [S(d') := d] ‚ñ∑ l ‚Ü¶‚àó: ty.(ty_own) aœÄ d' tid) ‚àó
    ([‚àó list] (l, aœÄ) ‚àà aœÄl, freeable_sz' ty.(ty_size) l).
  Proof. setoid_rewrite ghostptrtoken_own_alt.
    iSplit. iIntros "(%&‚Ü¶&%&(->&?)&ty)". iExists _. iFrame.
    iIntros "(%&->&‚Ü¶&ty)". iExists []. iFrame. iExists _. iFrame. done.
  Qed.
(* 
Lemma split_mt_token {ùîÑ} d l' alœÄ Œ¶ :
  (l' ‚Ü¶‚àó: (Œª vl, [S(d') := d] ‚àÉ (aœÄl: list (proph (loc * ùîÑ))),
    ‚åúvl = [] ‚àß alœÄ = lapply aœÄl‚åù ‚àó Œ¶ d' aœÄl)) ‚ä£‚ä¢
  [S(d') := d] ‚àÉ(aœÄl: list (loc * (proph ùîÑ))),
    ‚åúalœÄ = alapply aœÄl‚åù ‚àó l' ‚Ü¶‚àó [] ‚àó Œ¶ d' aœÄl.
Proof.
  iSplit.
  - iIntros "(%& ‚Ü¶ & big)". case d=>// ?. iDestruct "big" as (?[->->]) "Œ¶".
    iExists _. iSplit; [done|iFrame].
  - iIntros "big". case d=>// ?. iDestruct "big" as (?->) "(‚Ü¶ & ?)".
    iExists []. iFrame "‚Ü¶". iExists _. by iFrame.
Qed.

  Lemma ty_share_big_sepAL {ùîÑ} (ty: type ùîÑ) E aœÄl d Œ∫ tid q :
    ‚ÜëlftN ‚äÜ E ‚Üí lft_ctx -‚àó Œ∫ ‚äë ty_lft ty -‚àó
    &{Œ∫} ([‚àó list] (l, aœÄ) ‚àà aœÄl, l ‚Ü¶‚àó: ty.(ty_own) aœÄ d tid) -‚àó q.[Œ∫]
      ={E}=‚àó |={E}‚ñ∑=>^d |={E}=>
        ([‚àó list] (l, aœÄ) ‚àà aœÄl, ty.(ty_shr) aœÄ d Œ∫ tid l) ‚àó q.[Œ∫].
  Proof.
    iIntros (?) "#LFT #In Bor Œ∫".
    iMod (bor_big_sepL with "LFT Bor") as "Bors"; [done|].
    iInduction aœÄl as [|[l x]] "IH" forall (q)=>/=.
    { iApply step_fupdN_full_intro. by iFrame. }
    iDestruct "Œ∫" as "[Œ∫ Œ∫‚Çä]". iDestruct "Bors" as "[Bor Bors]".
    iMod (ty_share with "LFT In Bor Œ∫") as "Toshr"; [done|].
    iMod ("IH" with "Œ∫‚Çä Bors") as "Toshrs".
    iCombine "Toshr Toshrs" as "Toshrs". iApply (step_fupdN_wand with "Toshrs").
    by iIntros "!> [>[$$] >[$$]]".
  Qed.

  Lemma trans_big_sepAL_mt_ty_own {ùîÑ} (ty: type ùîÑ) aœÄl d tid :
    ([‚àó list] (l, aœÄ) ‚àà aœÄl, l ‚Ü¶‚àó: ty.(ty_own) aœÄ d tid) ‚ä£‚ä¢
    ‚àÉ(wll: vec (list val) (length aœÄl)), ([‚àó list] elt ‚àà (vzip (vmap (Œª x, x.1) (Vector.of_list aœÄl)) wll), elt.1 ‚Ü¶‚àó elt.2) ‚àó
      ([‚àó list] aœÄwl ‚àà vzip (vmap (Œª x, x.2) (Vector.of_list aœÄl)) wll, ty.(ty_own) aœÄwl.1 d tid aœÄwl.2).
  Proof.
    iSplit.
    - iIntros "‚Ü¶owns". iInduction aœÄl as [|[l x]] "IH"=>/=.
      { iExists [#]. iSplit; [done|done]. }
      iDestruct "‚Ü¶owns" as "[(%& ‚Ü¶ & ty) ‚Ü¶owns]".
      iDestruct ("IH" with "‚Ü¶owns") as (?) "(‚Ü¶s & tys)".
      iExists (_:::_). iFrame.
    - iIntros "(%& ‚Ü¶s & tys)". iInduction aœÄl as [|[l x]] "IH"; [done|].
      inv_vec wll=>/= ??.
      iDestruct "‚Ü¶s" as "[‚Ü¶ ‚Ü¶s]". iDestruct "tys" as "[ty tys]".
      iSplitL "‚Ü¶ ty".
      { iExists _. iFrame. }
      iApply ("IH" with "‚Ü¶s tys").
  Qed. *)

  (* Lemma remove_alapply {A B} `{Countable K} (aœÄl: gmap K (A ‚Üí B)):
    alapply aœÄl = Œª œÄ, list_to_map (prod_map id (.$ œÄ) <$> (map_to_list aœÄl)).
  Proof.
    apply functional_extensionality. intros.
    rewrite list_to_map_fmap. rewrite list_to_map_to_list. exact.
  Qed. *)

  Lemma zip_to_prod_map{A B C} (f: B ‚Üí C) (l: list (A * B)):
    (zip l.*1 (f <$> l.*2)) = al_fmap f l.
  Proof.
    rewrite zip_with_fmap_r. rewrite zip_with_fst_snd.
    congr fmap.
    intros. apply functional_extensionality. intros. destruct x.
    unfold prod_map. unfold uncurry. unfold Datatypes.uncurry. unfold fst. unfold snd. unfold id. reflexivity.
  Qed.

  Global Instance ghostptrtoken_ty_ne {ùîÑ} : NonExpansive (@ghostptrtoken_ty ùîÑ).
  Proof. solve_ne_type. done. Qed.
End token.
