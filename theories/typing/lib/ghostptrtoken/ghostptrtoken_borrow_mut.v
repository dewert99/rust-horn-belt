From lrust.typing Require Export type.
From lrust.typing Require Import uniq_util typing ptr.
From lrust.typing.lib Require Import ghostptrtoken.ghostptrtoken.
Set Default Proof Using "Type".

Open Scope nat.

Implicit Type ùîÑ ùîÖ: syn_type.

Section ghostptrtoken_insertremove.
  Context `{!typeG Œ£}.

  Definition ghostptrtoken_borrow_mut {ùîÑ} (ty: type ùîÑ) : val :=
    fn: ["t"; "b"] :=
      delete [ #1; "t"];;
      Skip;;
      return: ["b"].

  (* Rust's GhostPtrToken::borrow_mut *)
  Lemma ghostptrtoken_borrow_mut_type {ùîÑ} (ty: type ùîÑ) (Œ± Œ≤: lft):
    typed_val (ghostptrtoken_borrow_mut ty) (fn(‚àÖ; &uniq{Œ±} (&uniq{Œ≤} (ghostptrtoken_ty ty)), ptr) ‚Üí &uniq{Œ≤} ty)
      (Œª post '-[((ol, ol'), (nl, nl')); ptr], exists v, (list_to_gmap ol) !! ptr = Some(v) ‚àß (<[ptr:=v]>(list_to_gmap nl) = (list_to_gmap ol) ‚Üí forall v', (ol' = (ptr,v')::nl') ‚Üí post (v, v'))).
  Proof.
    fold of_syn_type. eapply type_fn; [apply _|]=> ???[ol[pl[]]]. simpl_subst.
    iIntros (?(lœÄœÄ & pœÄ &[]) ?) "#LFT #TIME #PROPH #UNIQ #E Na L C /=(ol & p &_) #Obs".
    rewrite !tctx_hasty_val. iDestruct "ol" as ([|dm]) "[_ ol]"=>//.
    case ol as [[|ol|]|]=>//. iDestruct "ol" as "[(%oll & >‚Ü¶ol & [#LftIn uniq]) ‚Ä†ol]".
    case oll as [|[[|m|]|][]]; try by iDestruct "uniq" as ">[]".
    iDestruct "p" as ([|dx]) "[‚ßñp p]"=>//. case pl as [[|pl|]|]=>//=.
    iDestruct "p" as "[p' ‚Ä†p]".
    wp_bind (delete _). iApply (wp_cumulative_time_receipt with "TIME"); [done|]. rewrite freeable_sz_full.
    iApply ((wp_delete [ #m])with "[‚Ü¶ol ‚Ä†ol]"); [done| by iFrame|]. 
    iNext. iIntros "_ ‚ßó".
    iDestruct "p'" as (?) "(‚Ü¶p&(%p&->&->))". simpl.
    iDestruct "uniq" as (du Œæi [? Eq2]) "[OVo OBor]".
    move: Eq2. set Œæ := PrVar _ Œæi => Eq2.
    iMod (lctx_lft_alive_tok Œ≤ with "E L") as (?) "(Œ≤ & L & ToL)"; [solve_typing..|].
    iMod (lctx_lft_alive_tok Œ± with "E L") as (?) "(Œ± & L & ToL2)"; [solve_typing..|].
    iMod (bor_acc with "LFT OBor Œ±") as "[(%&%& #‚ßñu & OPc & (%vl&‚Ü¶utoken&#Œ≤in&uniq')) ToOBor]"; [done|].
    wp_seq. iCombine "‚ßñp ‚ßñu" as "#‚ßñ". simpl.
    iDestruct (uniq_agree with "OVo OPc") as %[<-<-].
    destruct vl as [|[[|l'|]|][]]; simpl; try by iDestruct "uniq'" as "[]".
    iDestruct "uniq'" as (dv Œ∂i [? Eq3]) "[Vo Bor]".
    move: Eq3. set Œ∂ := PrVar _ Œ∂i => Eq3.
    iMod (bor_acc_cons with "LFT Bor Œ≤") as "[(%&%&_& Pc & ‚Ü¶token) ToBor]"; [done|].
    iMod (uniq_strip_later with "Vo Pc") as (<- <-) "[Vo Pc]".
    wp_seq.
    rewrite split_mt_token. case dv as [|dv]. done.
    simpl. iDestruct "‚Ü¶token" as (aœÄl) "(%Eq1 & ‚Ü¶l & ‚Ü¶tys‚Ä†)".
    remember ((list_to_gmap aœÄl) !! p) as vœÄ. symmetry in HeqvœÄ. destruct vœÄ as [vœÄ|]; last first.
    iMod (proph_obs_sat with "PROPH Obs") as %(œÄw&obs). done.
    exfalso. remember (equal_f Eq1 œÄw). clear Heqe.
    simpl in e. destruct (lœÄœÄ œÄw) as [[??][??]]. simpl in e.
    destruct obs as (v&obs&_). 
    rewrite e /alapply list_to_map_fmap
    lookup_fmap HeqvœÄ in obs. done.
    destruct (elem_of_list_to_map_2' _ _ _ HeqvœÄ) as (rœÄ&perm&reinsert).
    unfold big_sepAL.
    iEval (rewrite perm 2! big_sepL_cons) in "‚Ü¶tys‚Ä†".
    iDestruct "‚Ü¶tys‚Ä†" as "((‚Ü¶ty&‚Ü¶tys)&(‚Ä†&‚Ä†s))".
    iMod (uniq_intro (ùîÑ:=list‚Çõ (loc‚Çõ * ùîÑ)) (alapply rœÄ) with "PROPH UNIQ") as (Œ∂'i) "[Vo' Pc']"; [done|].
    set Œ∂' := PrVar _ Œ∂'i. iDestruct (uniq_proph_tok with "Vo' Pc'") as "(Vo' & Œ∂' & Pc')".
    iMod (uniq_intro vœÄ with "PROPH UNIQ") as (Œ∑i) "[RVo RPc]"; [done|].
    set Œ∑ := PrVar _ Œ∑i. iDestruct (uniq_proph_tok with "RVo RPc") as "(RVo & Œ∑ & RPc)".
    rewrite 2! proph_tok_singleton.
    iDestruct (proph_tok_combine with "Œ∑ Œ∂'") as (?) "[Œ∑Œ∂ ToŒ∑Œ∂]".
    iMod (uniq_preresolve Œ∂ _ (Œª œÄ, (p, (œÄ Œ∑)) :: (œÄ Œ∂'))
    with "PROPH Vo Pc Œ∑Œ∂") as "(#Obs' & Œ∑Œ∂ & ToPc)"; [done| |].
    apply proph_dep_constr2; [apply proph_dep_constr|]; apply proph_dep_one.
    iMod ((uniq_update Œæ (Œª œÄ, (al_fmap _ rœÄ, œÄ Œ∂'))) with "UNIQ OVo OPc") as "[OVo OPc]"; [done|].
    iDestruct ("ToŒ∑Œ∂" with "Œ∑Œ∂") as "[Œ∑ Œ∂']".
    (* iMod (uniq_resolve Œæ with "PROPH OVo OPc Œ∂'") as "(Obs''&OPc&Œ∂')"; [done| |]; last first. *)
    iCombine "Obs' Obs" as "#?". iClear "Obs".
    iSpecialize ("Pc'" with "Œ∂'"). iSpecialize ("RPc" with "Œ∑").
    iMod ("ToBor" $! (_‚àó_)%I with "[ToPc ‚Ä† ‚ßó] [Pc' RPc ‚Ü¶tys ‚Ü¶l ‚Ü¶ty ‚Ä†s]")
      as "[Bor Œ≤]"; last first.
    - iMod (bor_sep with "LFT Bor") as "(BorR&BorK)"; [done|].
    iMod ("ToOBor" with "[OPc ‚Ü¶utoken Œ≤in Vo' BorK]") as "[OBor Œ±]".
    {iNext. iExists _, _. iFrame "OPc ‚ßñu". iExists _. iFrame "‚Ü¶utoken Œ≤in".
    iExists _, _. iSplit. iSplit. done. done.
    iFrame "Vo' BorK". }
    wp_seq.
    iMod ("ToL2" with "Œ± L") as "L". iMod ("ToL" with "Œ≤ L") as "L".
    iApply (type_type +[#m ‚óÅ &uniq{Œ±} (&uniq{Œ≤} (ghostptrtoken_ty ty)); #pl ‚óÅ box (&uniq{Œ≤} ty)] -[(Œª œÄ, ((al_fmap (.$ œÄ) rœÄ, œÄ Œ∂'), œÄ Œæ)); (Œª œÄ, (vœÄ œÄ, œÄ Œ∑))]
    with "[] LFT TIME PROPH UNIQ E Na L C [-] []").
    iApply type_jump; [solve_typing|solve_extract|solve_typing].
    iSplitL "OVo OBor"; [|iSplitL; [|done]]; rewrite (tctx_hasty_val #_);
    iExists _. simpl. iFrame "‚ßñu". iFrame "LftIn".
    iExists du, _.
    unfold uniq_body.
    rewrite (proof_irrel (@prval_to_inh ((list‚Çõ (loc‚Çõ * ùîÑ)) * (list‚Çõ (loc‚Çõ * ùîÑ))) (Œª œÄ, (al_fmap (.$ œÄ) rœÄ, œÄ Œ∂'))) 
    (@prval_to_inh ((list‚Çõ (loc‚Çõ * ùîÑ)) * (list‚Çõ (loc‚Çõ * ùîÑ))) (fst ‚àò lœÄœÄ))).
    iFrame. done. 
    iFrame "‚ßñu ‚Ä†p". iNext. rewrite split_mt_uniq_bor. iFrame "Œ≤in". 
    iExists _, _, _. rewrite heap_mapsto_vec_singleton. iFrame "‚Ü¶p RVo BorR". done.
    simpl.
    iApply proph_obs_impl; [|done] => œÄ/=.
    move: (equal_f Eq1 œÄ) (equal_f Eq2 œÄ) (equal_f Eq3 œÄ)=>/=.
    destruct (lœÄœÄ œÄ) as [[oam oam'][nam' nam]]. simpl.
    intros -><-<- (->&v&Contains&Imp) [= ->->]. rewrite /alapply list_to_map_fmap lookup_fmap_Some HeqvœÄ in Contains. destruct Contains as (?&<-&[=<-]).  
    apply Imp. rewrite /alapply 2! list_to_map_fmap -fmap_insert reinsert. done.
    done.
    - iNext. iSplitL "RPc ‚Ü¶ty". iExists _, _. iFrame "RPc".
    iSplit. 
    iApply (persistent_time_receipt_mono with "‚ßñu"). lia.
    iApply (ty_own_mt_depth_mono with "‚Ü¶ty"). lia.
    iExists _, _. iFrame. iSplitR.
    iApply (persistent_time_receipt_mono with "‚ßñ"). lia.
    iExists _. iFrame. iExists _. iFrame. done.
    - iNext. iIntros "((%vœÄ'&%d'&>‚ßñd'&Pc1&‚Ü¶ty)&(%mœÄ'&%d''&>‚ßñd''&Pc2&%vl&‚Ü¶emp&‚Ü¶tys))".
    iCombine "‚ßñd' ‚ßñd''" as "‚ßñd".
    iMod (cumulative_persistent_time_receipt with "TIME ‚ßó ‚ßñd")
    as "‚ßñd"; [solve_ndisj|]. simpl.
    iModIntro. iNext. destruct d''. done. simpl. iDestruct "‚Ü¶tys" as "(%aœÄl'&(->&->)&‚Ü¶tys&‚Ä†s)".
    iExists (Œª œÄ, ((p, (vœÄ' œÄ)) :: (alapply aœÄl' œÄ))), _. iFrame.
    iSplitL "Pc1 Pc2 ToPc". iApply "ToPc".
    iDestruct (proph_ctrl_eqz with "PROPH Pc1") as "Eqz1".
    iDestruct (proph_ctrl_eqz with "PROPH Pc2") as "Eqz2".
    iApply (proph_eqz_constr2 with "[Eqz1] Eqz2").
    iApply (proph_eqz_constr with "Eqz1").
    iExists _. iFrame. 
    iExists _. iSplit. iPureIntro. split. done. apply functional_extensionality. intros œÄ.
    rewrite /alapply -/(prod_map id (.$ œÄ) (p, vœÄ')) -fmap_cons. done.
    iFrame. iNext. unfold big_sepAL.
    rewrite big_sepL_cons. iSplitL "‚Ü¶ty".
    iApply (ty_own_mt_depth_mono with "‚Ü¶ty"). lia.
    iApply (big_sepL_mono with "‚Ü¶tys"). iIntros (?[??]?) "‚Ü¶ty".
    iApply (ty_own_mt_depth_mono with "‚Ü¶ty"). lia.
  Qed.

End ghostptrtoken_insertremove.
